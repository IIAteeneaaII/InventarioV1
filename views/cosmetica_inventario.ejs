<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Inventario Cosm√©tico</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"/>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css"/>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"/>
  <style>
    .loading-spinner {
      display: none;
    }
    .error-state {
      color: #dc3545;
      font-style: italic;
    }
    .success-update {
      background-color: #d4edda !important;
      transition: background-color 0.5s ease;
    }
    .btn-group-actions {
      display: flex;
      gap: 5px;
      flex-wrap: wrap;
    }
    .btn-sm-custom {
      font-size: 0.8rem;
      padding: 0.25rem 0.5rem;
    }

    /* === ESTILOS PARA SISTEMA DE TICKETS === */
    .tickets-trigger {
      position: fixed;
      bottom: 20px;
      left: 20px;
      background: linear-gradient(45deg, #e74c3c, #c0392b);
      color: white;
      border: none;
      border-radius: 50px;
      padding: 15px 25px;
      cursor: pointer;
      font-size: 1.1em;
      font-weight: 600;
      box-shadow: 0 4px 15px rgba(231, 76, 60, 0.4);
      transition: all 0.3s ease;
      z-index: 1000;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .tickets-trigger:hover {
      transform: translateY(-3px);
      box-shadow: 0 6px 20px rgba(231, 76, 60, 0.6);
      background: linear-gradient(45deg, #c0392b, #a93226);
    }

    .tickets-panel {
      position: fixed;
      top: 0;
      right: -400px;
      width: 400px;
      height: 100vh;
      background: linear-gradient(to bottom, #f8f9fa, #ecf0f1);
      box-shadow: -5px 0 20px rgba(0, 0, 0, 0.2);
      transition: right 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      z-index: 10000;
      overflow-y: auto;
    }

    .tickets-panel.active {
      right: 0;
    }

    .tickets-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(2px);
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
      z-index: 9999;
    }

    .tickets-overlay.active {
      opacity: 1;
      visibility: visible;
    }

    .tickets-header {
      background: linear-gradient(to right, #2c3e50, #34495e);
      color: white;
      padding: 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .tickets-header h3 {
      margin: 0;
      font-size: 1.3rem;
      font-weight: 600;
    }

    .close-tickets-btn {
      background: none;
      border: none;
      color: white;
      font-size: 1.5rem;
      cursor: pointer;
      padding: 5px;
      border-radius: 50%;
      transition: all 0.3s ease;
    }

    .close-tickets-btn:hover {
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(90deg);
    }

    .tickets-content {
      padding: 20px;
      height: calc(100vh - 80px);
      overflow-y: auto;
    }

    .tickets-tabs {
      display: flex;
      margin-bottom: 20px;
      border-radius: 8px;
      background: #fff;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      overflow: hidden;
    }

    .tickets-tab {
      flex: 1;
      padding: 12px 16px;
      background: #f8f9fa;
      border: none;
      cursor: pointer;
      font-weight: 500;
      transition: all 0.3s ease;
      color: #7f8c8d;
    }

    .tickets-tab.active {
      background: linear-gradient(to right, #3498db, #2980b9);
      color: white;
      box-shadow: 0 2px 8px rgba(52, 152, 219, 0.3);
    }

    .tickets-tab:not(.active):hover {
      background: #e9ecef;
      color: #495057;
    }

    .ticket-form {
      background: white;
      border-radius: 12px;
      padding: 20px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      margin-bottom: 20px;
    }

    .form-group {
      margin-bottom: 20px;
    }

    .form-group label {
      display: block;
      margin-bottom: 8px;
      color: #2c3e50;
      font-weight: 600;
      font-size: 0.95rem;
    }

    .form-group select,
    .form-group textarea,
    .form-group input {
      width: 100%;
      padding: 12px;
      border: 2px solid #e0e6ed;
      border-radius: 8px;
      font-size: 1rem;
      transition: all 0.3s ease;
      box-sizing: border-box;
    }

    .form-group select:focus,
    .form-group textarea:focus,
    .form-group input:focus {
      outline: none;
      border-color: #3498db;
      box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
    }

    .form-group textarea {
      resize: vertical;
      min-height: 100px;
      max-height: 200px;
    }

    .priority-selector {
      display: grid;
      grid-template-columns: repeat(5, 1fr);
      gap: 8px;
      margin-top: 8px;
    }

    .priority-option {
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 10px 5px;
      border: 2px solid #e0e6ed;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 0.85rem;
      font-weight: 500;
    }

    .priority-option.priority-1 { border-color: #27ae60; color: #27ae60; }
    .priority-option.priority-2 { border-color: #3498db; color: #3498db; }
    .priority-option.priority-3 { border-color: #f39c12; color: #f39c12; }
    .priority-option.priority-4 { border-color: #e67e22; color: #e67e22; }
    .priority-option.priority-5 { border-color: #e74c3c; color: #e74c3c; }

    .priority-option.selected {
      transform: scale(1.05);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .priority-option.priority-1.selected { background: rgba(39, 174, 96, 0.1); }
    .priority-option.priority-2.selected { background: rgba(52, 152, 219, 0.1); }
    .priority-option.priority-3.selected { background: rgba(243, 156, 18, 0.1); }
    .priority-option.priority-4.selected { background: rgba(230, 126, 34, 0.1); }
    .priority-option.priority-5.selected { background: rgba(231, 76, 60, 0.1); }

    .priority-number {
      font-size: 1.2rem;
      font-weight: 700;
      margin-bottom: 4px;
    }

    .priority-label {
      font-size: 0.75rem;
      text-align: center;
      line-height: 1.1;
    }

    .submit-ticket-btn {
      width: 100%;
      padding: 14px;
      background: linear-gradient(to right, #2ecc71, #27ae60);
      color: white;
      border: none;
      border-radius: 8px;
      font-size: 1.1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 4px 12px rgba(39, 174, 96, 0.3);
    }

    .submit-ticket-btn:hover {
      background: linear-gradient(to right, #27ae60, #219653);
      transform: translateY(-2px);
      box-shadow: 0 6px 16px rgba(39, 174, 96, 0.4);
    }

    .submit-ticket-btn:disabled {
      background: #bdc3c7;
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }

    .tickets-list {
      background: white;
      border-radius: 12px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      overflow: hidden;
    }

    .ticket-item {
      padding: 16px;
      border-bottom: 1px solid #e9ecef;
      transition: background-color 0.3s ease;
    }

    .ticket-item:hover {
      background-color: #f8f9fa;
    }

    .ticket-item:last-child {
      border-bottom: none;
    }

    .ticket-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 8px;
    }

    .ticket-type {
      font-size: 0.85rem;
      padding: 4px 8px;
      border-radius: 4px;
      font-weight: 500;
      text-transform: uppercase;
    }

    .ticket-type.solicitud { background: #e3f2fd; color: #1976d2; }
    .ticket-type.problema { background: #ffebee; color: #c62828; }

    .ticket-priority {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 0.8rem;
      font-weight: 700;
      color: white;
      margin-left: 8px;
    }

    .ticket-priority.priority-1 { background: #27ae60; }
    .ticket-priority.priority-2 { background: #3498db; }
    .ticket-priority.priority-3 { background: #f39c12; }
    .ticket-priority.priority-4 { background: #e67e22; }
    .ticket-priority.priority-5 { background: #e74c3c; }

    .ticket-description {
      color: #555;
      font-size: 0.95rem;
      margin-bottom: 8px;
      line-height: 1.4;
    }

    .ticket-meta {
      display: flex;
      justify-content: space-between;
      align-items: center;
      font-size: 0.85rem;
      color: #7f8c8d;
    }

    .ticket-status {
      padding: 4px 8px;
      border-radius: 12px;
      font-weight: 500;
      font-size: 0.8rem;
    }

    .ticket-status.pendiente { background: #fff3cd; color: #856404; }
    .ticket-status.en-proceso { background: #cce5ff; color: #0056b3; }
    .ticket-status.resuelto { background: #d4edda; color: #155724; }

    .empty-state {
      text-align: center;
      padding: 40px 20px;
      color: #7f8c8d;
    }

    .empty-state i {
      font-size: 3rem;
      margin-bottom: 16px;
      opacity: 0.6;
    }

    .readonly-input {
      background: #f8f9fa !important;
      color: #6c757d !important;
      cursor: not-allowed !important;
    }

    .tickets-content::-webkit-scrollbar {
      width: 6px;
    }

    .tickets-content::-webkit-scrollbar-track {
      background: #f1f1f1;
      border-radius: 3px;
    }

    .tickets-content::-webkit-scrollbar-thumb {
      background: #c1c1c1;
      border-radius: 3px;
    }

    .tickets-content::-webkit-scrollbar-thumb:hover {
      background: #a8a8a8;
    }
  </style>
</head>

<body>
  <!-- Header -->
  <div class="app-header d-flex align-items-center justify-content-between px-4 py-3" style="background: #365a66;">
    <div class="d-flex align-items-center">
      <span style="font-size:2em; font-weight:bold; color:#fff;">
        Inventario de Insumos de Cosm√©tica RAM <span id="ram-number">--</span>
      </span>
    </div>
    <div class="d-flex align-items-center gap-2">
      <img id="user-avatar" src="/img/usuario.webp" alt="Usuario" class="user-icon" 
           style="width: 40px; height: 40px; border-radius: 50%; background: #fff; border: 2px solid #fff;"
           onerror="this.style.display='none';">
      <span class="username ms-2" style="font-size: 1.2em; font-weight: bold; color: #fff;" id="username">
        Usuario
      </span>
      <button id="logout-icon" class="btn btn-link p-0 ms-3" title="Cerrar sesi√≥n" 
              style="color: #fff; font-size: 1.5em;" onclick="cerrarSesion()" 
              aria-label="Cerrar sesi√≥n">
        <i class="fas fa-right-from-bracket"></i>
      </button>
    </div>
  </div>

  <div class="admin-container" style="background-color: white; padding: 30px; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); max-width: 1400px; margin: 40px auto;">
    
    <!-- Loading state -->
    <div id="loading-state" class="text-center loading-spinner">
      <div class="spinner-border" role="status">
        <span class="visually-hidden">Cargando...</span>
      </div>
      <p class="mt-2">Cargando inventario...</p>
    </div>

    <!-- Error state -->
    <div id="error-state" class="alert alert-danger" style="display: none;">
      <i class="fas fa-exclamation-triangle"></i>
      <span id="error-message">Ha ocurrido un error al cargar los datos.</span>
      <button class="btn btn-outline-danger btn-sm ms-2" onclick="recargarDatos()">
        <i class="fas fa-refresh"></i> Reintentar
      </button>
    </div>

    <!-- Tabs de navegaci√≥n -->
    <ul class="nav nav-tabs" id="inventarioTabs" role="tablist">
      <li class="nav-item" role="presentation">
        <button class="nav-link active" id="inventario-tab" data-bs-toggle="tab" 
                data-bs-target="#inventario" type="button" role="tab" 
                aria-controls="inventario" aria-selected="true">
          <i class="fas fa-boxes"></i> Inventario
        </button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link position-relative" id="transferencias-tab" data-bs-toggle="tab" 
                data-bs-target="#transferencias" type="button" role="tab" 
                aria-controls="transferencias" aria-selected="false">
          <i class="fas fa-exchange-alt"></i> Transferencias
          <span id="badge-transferencias" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" 
                style="display: none;">
            0
          </span>
        </button>
      </li>
    </ul>

    <!-- Contenido de las tabs -->
    <div class="tab-content" id="inventarioTabsContent">
      
      <!-- Tab de Inventario -->
      <div class="tab-pane fade show active" id="inventario" role="tabpanel" aria-labelledby="inventario-tab">
        <div class="mt-4">
          <div class="alert alert-info">
            <i class="fas fa-info-circle"></i> 
            Use "Env√≠o" para agregar stock (entrada). Use "Recibo" para quitar stock (salida).
            Use "Pendientes" para ver transferencias entre RAMs.
          </div>
          
          <div class="card">
            <div class="card-body">
              <div class="table-responsive">
                <table class="table table-bordered table-striped table-hover" id="inventario-table">
                  <thead class="table-dark">
                    <tr>
                      <th scope="col">Nombre SKU</th>
                      <th scope="col">Capuchones</th>
                      <th scope="col">Bases</th>
                      <th scope="col">Tapas</th>
                      <th scope="col">Total General</th>
                      <th scope="col">Acciones</th>
                    </tr>
                  </thead>
                  <tbody id="inventario-tbody">
                    <tr>
                      <td colspan="6" class="text-center">Cargando datos...</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Tab de Transferencias -->
      <div class="tab-pane fade" id="transferencias" role="tabpanel" aria-labelledby="transferencias-tab">
        <div class="mt-4">
          <div class="row">
            
            <!-- Transferencias por Recibir -->
            <div class="col-md-6">
              <div class="card">
                <div class="card-header bg-success text-white">
                  <h5 class="mb-0"><i class="fas fa-inbox"></i> Por Recibir</h5>
                </div>
                <div class="card-body" id="transferencias-recibo">
                  <div class="text-center text-muted">
                    <div class="spinner-border spinner-border-sm" role="status">
                      <span class="visually-hidden">Cargando...</span>
                    </div>
                    <p class="mt-2">Cargando transferencias...</p>
                  </div>
                </div>
              </div>
            </div>

            <!-- Transferencias Enviadas -->
            <div class="col-md-6">
              <div class="card">
                <div class="card-header bg-warning text-dark">
                  <h5 class="mb-0"><i class="fas fa-clock"></i> Enviadas (Pendientes)</h5>
                </div>
                <div class="card-body" id="transferencias-enviadas">
                  <div class="text-center text-muted">
                    <div class="spinner-border spinner-border-sm" role="status">
                      <span class="visually-hidden">Cargando...</span>
                    </div>
                    <p class="mt-2">Cargando transferencias...</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- SISTEMA DE TICKETS -->
  <!-- Bot√≥n flotante para abrir sistema de tickets -->
  <button class="tickets-trigger" id="open-tickets-btn">
    <i class="fas fa-ticket-alt"></i>
    <span>Tickets</span>
  </button>

  <!-- Overlay para el panel de tickets -->
  <div class="tickets-overlay" id="tickets-overlay"></div>

  <!-- Panel deslizante de tickets -->
  <div class="tickets-panel" id="tickets-panel">
    <div class="tickets-header">
      <h3>Sistema de Tickets</h3>
      <button class="close-tickets-btn" id="close-tickets-btn">
        <i class="fas fa-times"></i>
      </button>
    </div>

    <div class="tickets-content">
      <!-- Tabs -->
      <div class="tickets-tabs">
        <button class="tickets-tab active" data-tab="create">
          <i class="fas fa-plus-circle"></i> Crear Ticket
        </button>
        <button class="tickets-tab" data-tab="view">
          <i class="fas fa-list"></i> Mis Tickets
        </button>
      </div>

      <!-- Tab Content: Crear Ticket -->
      <div id="create-ticket-tab" class="tab-content">
        <form class="ticket-form" id="ticket-form">
          <div class="form-group">
            <label for="ticket-type">Tipo de Solicitud</label>
            <select id="ticket-type" name="tipo" required>
              <option value="">Seleccionar tipo...</option>
              <option value="SOLICITUD_FUNCION">Solicitud de Funci√≥n</option>
              <option value="REPORTAR_PROBLEMA">Reportar Problema</option>
            </select>
          </div>

          <div class="form-group">
            <label for="ticket-user">Usuario Solicitante</label>
            <input type="text" id="ticket-user" name="usuario" readonly class="readonly-input">
          </div>

          <div class="form-group">
            <label for="ticket-description">Descripci√≥n</label>
            <textarea id="ticket-description" name="descripcion" placeholder="Describe detalladamente el problema o solicitud..." required></textarea>
          </div>

          <div class="form-group">
            <label>Nivel de Prioridad</label>
            <div class="priority-selector">
              <div class="priority-option priority-1" data-priority="1">
                <div class="priority-number">1</div>
                <div class="priority-label">Baja</div>
              </div>
              <div class="priority-option priority-2" data-priority="2">
                <div class="priority-number">2</div>
                <div class="priority-label">Media Baja</div>
              </div>
              <div class="priority-option priority-3" data-priority="3">
                <div class="priority-number">3</div>
                <div class="priority-label">Media</div>
              </div>
              <div class="priority-option priority-4" data-priority="4">
                <div class="priority-number">4</div>
                <div class="priority-label">Alta</div>
              </div>
              <div class="priority-option priority-5" data-priority="5">
                <div class="priority-number">5</div>
                <div class="priority-label">Cr√≠tica</div>
              </div>
            </div>
          </div>

          <button type="submit" class="submit-ticket-btn">
            <i class="fas fa-paper-plane"></i>
            Enviar Ticket
          </button>
        </form>
      </div>

      <!-- Tab Content: Ver Tickets -->
      <div id="view-tickets-tab" class="tab-content" style="display: none;">
        <div class="tickets-list" id="tickets-list">
          <!-- Los tickets se cargar√°n din√°micamente aqu√≠ -->
        </div>
      </div>
    </div>
  </div>

  <!-- Modal de Movimiento (Entrada/Salida) -->
  <div class="modal fade" id="movimientoModal" tabindex="-1" aria-labelledby="movimientoModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header" id="movimientoModalHeader">
          <h5 class="modal-title" id="movimientoModalTitle">Registrar Movimiento</h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Cerrar"></button>
        </div>
        <div class="modal-body">
          <form id="movimientoForm" novalidate>
            <input type="hidden" id="movimientoSkuId" name="skuId"/>
            <input type="hidden" id="tipoMovimiento" name="tipoMovimiento"/>
            <div class="mb-3">
              <label class="form-label">SKU:</label>
              <p class="form-control-plaintext fw-bold mb-2" id="movimientoNombreSkuModal">-</p>
            </div>
            <div class="mb-3">
              <label for="movimientoTipoInsumo" class="form-label">Insumo <span class="text-danger">*</span></label>
              <select class="form-select" id="movimientoTipoInsumo" name="tipoInsumo" required>
                <option value="">Seleccione un insumo</option>
                <option value="CAPUCHONES">Capuchones</option>
                <option value="BASES">Bases</option>
                <option value="TAPAS">Tapas</option>
              </select>
              <div class="invalid-feedback">
                Debe seleccionar un tipo de insumo.
              </div>
            </div>
            <div class="mb-3">
              <label for="movimientoCantidad" class="form-label">Cantidad <span class="text-danger">*</span></label>
              <input type="number" class="form-control" id="movimientoCantidad" name="cantidad" min="1" required/>
              <div class="invalid-feedback">
                Debe ingresar una cantidad v√°lida.
              </div>
              <div class="form-text" id="movimientoInfo">
                Disponible para recibo: <span id="movimiento-cantidad-disponible">--</span>
              </div>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
          <button type="submit" form="movimientoForm" class="btn btn-primary" id="btn-movimiento">
            <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
            Guardar
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal de Env√≠o (Transferencias) -->
  <div class="modal fade" id="envioModal" tabindex="-1" aria-labelledby="envioModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header bg-primary text-white">
          <h5 class="modal-title" id="envioModalLabel">Registrar Env√≠o de Insumos</h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Cerrar"></button>
        </div>
        <div class="modal-body">
          <form id="envioForm" novalidate>
            <input type="hidden" id="envioSkuId" name="skuId"/>
            <div class="mb-3">
              <label class="form-label">SKU:</label>
              <p class="form-control-plaintext fw-bold mb-2" id="envioNombreSkuModal">-</p>
            </div>
            <div class="mb-3">
              <label for="envioTipoInsumo" class="form-label">Insumo <span class="text-danger">*</span></label>
              <select class="form-select" id="envioTipoInsumo" name="tipoInsumo" required>
                <option value="">Seleccione un insumo</option>
                <option value="CAPUCHONES">Capuchones</option>
                <option value="BASES">Bases</option>
                <option value="TAPAS">Tapas</option>
              </select>
              <div class="invalid-feedback">
                Debe seleccionar un tipo de insumo.
              </div>
            </div>
            <div class="mb-3">
              <label for="envioCantidad" class="form-label">Cantidad <span class="text-danger">*</span></label>
              <input type="number" class="form-control" id="envioCantidad" name="cantidad" min="1" required/>
              <div class="invalid-feedback">
                Debe ingresar una cantidad v√°lida.
              </div>
              <div class="form-text">
                Disponible: <span id="envio-cantidad-disponible">--</span>
              </div>
            </div>
            <div class="alert alert-info">
              <i class="fas fa-info-circle"></i> El env√≠o ser√° descontado de su inventario y estar√° pendiente hasta que el destinatario confirme el recibo.
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
          <button type="submit" form="envioForm" class="btn btn-primary" id="btn-enviar">
            <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
            Enviar
          </button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <script>
    // Estado global de la aplicaci√≥n
    const AppState = {
      inventario: {},
      transferenciasRecibo: [],
      transferenciasEnviadas: [],
      user: null,
      ramNumber: null,
      loading: false
    };

    let movimientoModal, envioModal;

    // Utilidades
    const Utils = {
      formatDate: (dateString) => {
        try {
          return new Date(dateString).toLocaleDateString('es-ES');
        } catch {
          return 'Fecha inv√°lida';
        }
      },

      validateForm: (form) => {
        form.classList.add('was-validated');
        return form.checkValidity();
      },

      showLoading: (element, show = true) => {
        const spinner = element.querySelector('.spinner-border');
        if (spinner) {
          spinner.style.display = show ? 'inline-block' : 'none';
        }
      },

      updateElementText: (id, text, addSuccessClass = false) => {
        const element = document.getElementById(id);
        if (element) {
          element.textContent = text;
          if (addSuccessClass) {
            element.classList.add('success-update');
            setTimeout(() => element.classList.remove('success-update'), 2000);
          }
        }
      },

      safeGetProperty: (obj, path, defaultValue = '') => {
        try {
          return path.split('.').reduce((current, key) => current?.[key], obj) || defaultValue;
        } catch {
          return defaultValue;
        }
      }
    };

    // API calls
    const API = {
      async request(url, options = {}) {
        try {
          const response = await fetch(url, {
            headers: {
              'Content-Type': 'application/json',
              ...options.headers
            },
            ...options
          });
          
          if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
          }
          
          return await response.json();
        } catch (error) {
          console.error('API Error:', error);
          throw error;
        }
      },

      async registrarMovimiento(data) {
        return this.request('/api/cosmetica/movimiento', {
          method: 'POST',
          body: JSON.stringify(data)
        });
      },

      async enviarInsumos(data) {
        return this.request('/api/cosmetica/envio', {
          method: 'POST',
          body: JSON.stringify(data)
        });
      },

      async confirmarRecibo(transferenciaId) {
        return this.request('/api/cosmetica/recibo', {
          method: 'POST',
          body: JSON.stringify({ transferenciaId })
        });
      },

      async cargarDatos() {
        // Para pruebas - datos de ejemplo
        // En producci√≥n, esto deber√≠a hacer una llamada real a tu API
        return {
          inventario: {
            'sku1': {
              skuId: 'sku1',
              nombre: 'Labial Rojo Intenso',
              CAPUCHONES: 150,
              BASES: 200,
              TAPAS: 100
            },
            'sku2': {
              skuId: 'sku2',
              nombre: 'Base L√≠quida Natural',
              CAPUCHONES: 75,
              BASES: 120,
              TAPAS: 90
            },
            'sku3': {
              skuId: 'sku3',
              nombre: 'Gloss Transparente',
              CAPUCHONES: 0,
              BASES: 50,
              TAPAS: 25
            }
          },
          transferenciasRecibo: [
            {
              id: 1,
              sku: { nombre: 'Labial Rojo Intenso' },
              tipoInsumo: 'CAPUCHONES',
              cantidad: 50,
              fechaEnvio: new Date().toISOString(),
              remitente: { nombre: 'RAM 002' }
            }
          ],
          transferenciasEnviadas: [
            {
              id: 2,
              sku: { nombre: 'Base L√≠quida Natural' },
              tipoInsumo: 'BASES',
              cantidad: 30,
              fechaEnvio: new Date().toISOString(),
              destinatario: { nombre: 'RAM 003' }
            }
          ],
          user: { nombre: 'Usuario Demo' },
          ramNumber: '001'
        };
      },

      // === NUEVOS M√âTODOS PARA SISTEMA DE TICKETS ===
      async createTicket(ticketData) {
        try {
          const response = await fetch('/api/tickets', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              ...ticketData,
              usuarioSolicitanteId: AppState.user?.id,
              usuarioSolicitante: AppState.user?.nombre
            })
          });

          if (response.ok) {
            const result = await response.json();
            return { success: true, data: result };
          } else {
            throw new Error('Error en el servidor');
          }
        } catch (error) {
          console.error('Error creating ticket:', error);
          
          // Fallback: simular ticket para demo (mientras no tienes backend)
          const newTicket = {
            id: Date.now(),
            tipo: ticketData.tipo,
            descripcion: ticketData.descripcion,
            prioridad: ticketData.prioridad,
            estado: 'PENDIENTE',
            fechaCreacion: new Date().toISOString(),
            usuarioSolicitante: ticketData.usuarioSolicitante
          };
          
          // Guardar en localStorage temporalmente
          const existingTickets = JSON.parse(localStorage.getItem('userTickets') || '[]');
          existingTickets.unshift(newTicket);
          localStorage.setItem('userTickets', JSON.stringify(existingTickets));
          
          return { success: true, data: newTicket };
        }
      },

      async loadUserTickets() {
        try {
          const response = await fetch(`/api/tickets/usuario/${AppState.user?.id}`);
          
          if (response.ok) {
            const result = await response.json();
            return result.data || [];
          } else {
            throw new Error('Error al cargar tickets');
          }
        } catch (error) {
          console.error('Error loading tickets:', error);
          
          // Fallback: cargar desde localStorage
          return JSON.parse(localStorage.getItem('userTickets') || '[]');
        }
      }
    };

    // Renderizado
    const Renderer = {
      renderInventario() {
        const tbody = document.getElementById('inventario-tbody');
        if (!tbody) return;

        if (Object.keys(AppState.inventario).length === 0) {
          tbody.innerHTML = `
            <tr>
              <td colspan="6" class="text-center text-muted">
                <i class="fas fa-box-open fa-2x mb-2 d-block"></i>
                No hay datos de inventario disponibles
              </td>
            </tr>
          `;
          return;
        }

        tbody.innerHTML = Object.values(AppState.inventario).map(item => {
          const nombre = Utils.safeGetProperty(item, 'nombre') || 
                        Utils.safeGetProperty(item, 'skuNombre') || 
                        Utils.safeGetProperty(item, 'skuItem') || 'SKU sin nombre';
          const capuchones = parseInt(item.CAPUCHONES) || 0;
          const bases = parseInt(item.BASES) || 0;
          const tapas = parseInt(item.TAPAS) || 0;
          const total = capuchones + bases + tapas;

          return `
            <tr>
              <td>${nombre}</td>
              <td id="cantidad-${item.skuId}-CAPUCHONES">${capuchones}</td>
              <td id="cantidad-${item.skuId}-BASES">${bases}</td>
              <td id="cantidad-${item.skuId}-TAPAS">${tapas}</td>
              <td id="total-${item.skuId}">${total}</td>
              <td>
                <div class="btn-group-actions">
                  <!-- Bot√≥n Env√≠o (act√∫a como Entrada - a√±adir stock) -->
                  <button class="btn btn-success btn-sm-custom me-1" 
                          data-bs-toggle="modal" data-bs-target="#movimientoModal"
                          data-sku-id="${item.skuId}"
                          data-tipo-movimiento="ENTRADA"
                          data-sku-nombre="${nombre}"
                          aria-label="Env√≠o (entrada) de ${nombre}">
                    <i class="fas fa-plus"></i> Env√≠o
                  </button>
                  <!-- Bot√≥n Recibo (act√∫a como Salida - quitar stock) -->
                  <button class="btn btn-danger btn-sm-custom me-1" 
                          data-bs-toggle="modal" data-bs-target="#movimientoModal"
                          data-sku-id="${item.skuId}"
                          data-tipo-movimiento="SALIDA"
                          data-sku-nombre="${nombre}"
                          ${total === 0 ? 'disabled' : ''}
                          aria-label="Recibo (salida) de ${nombre}">
                    <i class="fas fa-minus"></i> Recibo
                  </button>
                  <!-- Bot√≥n para ver transferencias pendientes -->
                  <button class="btn btn-info btn-sm-custom" 
                          onclick="mostrarTransferenciasPendientes('${item.skuId}')"
                          aria-label="Ver transferencias de ${nombre}">
                    <i class="fas fa-exchange-alt"></i> Pendientes
                  </button>
                </div>
              </td>
            </tr>
          `;
        }).join('');
      },

      renderTransferenciasRecibo() {
        const container = document.getElementById('transferencias-recibo');
        if (!container) return;

        if (AppState.transferenciasRecibo.length === 0) {
          container.innerHTML = `
            <div class="text-center text-muted">
              <i class="fas fa-inbox fa-3x mb-3"></i>
              <p>No hay transferencias pendientes de recibo</p>
            </div>
          `;
          return;
        }

        container.innerHTML = `
          <div class="list-group">
            ${AppState.transferenciasRecibo.map(transfer => `
              <div class="list-group-item">
                <div class="d-flex w-100 justify-content-between">
                  <h6 class="mb-1">${Utils.safeGetProperty(transfer, 'sku.nombre', 'SKU sin nombre')}</h6>
                  <small class="text-muted">${Utils.formatDate(transfer.fechaEnvio)}</small>
                </div>
                <p class="mb-1">
                  <strong>${transfer.tipoInsumo}:</strong> ${transfer.cantidad} unidades
                </p>
                <small class="text-muted">De: ${Utils.safeGetProperty(transfer, 'remitente.nombre', 'Remitente desconocido')}</small>
                <div class="mt-2">
                  <button class="btn btn-success btn-sm" onclick="confirmarRecibo(${transfer.id})"
                          aria-label="Confirmar recibo de ${transfer.tipoInsumo}">
                    <i class="fas fa-check"></i> Confirmar Recibo
                  </button>
                </div>
              </div>
            `).join('')}
          </div>
        `;
      },

      renderTransferenciasEnviadas() {
        const container = document.getElementById('transferencias-enviadas');
        if (!container) return;

        if (AppState.transferenciasEnviadas.length === 0) {
          container.innerHTML = `
            <div class="text-center text-muted">
              <i class="fas fa-clock fa-3x mb-3"></i>
              <p>No hay transferencias enviadas pendientes</p>
            </div>
          `;
          return;
        }

        container.innerHTML = `
          <div class="list-group">
            ${AppState.transferenciasEnviadas.map(transfer => `
              <div class="list-group-item">
                <div class="d-flex w-100 justify-content-between">
                  <h6 class="mb-1">${Utils.safeGetProperty(transfer, 'sku.nombre', 'SKU sin nombre')}</h6>
                  <small class="text-muted">${Utils.formatDate(transfer.fechaEnvio)}</small>
                </div>
                <p class="mb-1">
                  <strong>${transfer.tipoInsumo}:</strong> ${transfer.cantidad} unidades
                </p>
                <small class="text-muted">Para: ${Utils.safeGetProperty(transfer, 'destinatario.nombre', 'Destinatario desconocido')}</small>
                <div class="mt-2">
                  <span class="badge bg-warning text-dark">
                    <i class="fas fa-clock"></i> Pendiente de confirmaci√≥n
                  </span>
                </div>
              </div>
            `).join('')}
          </div>
        `;
      },

      updateBadge() {
        const badge = document.getElementById('badge-transferencias');
        if (!badge) return;

        const count = AppState.transferenciasRecibo.length;
        if (count > 0) {
          badge.textContent = count;
          badge.style.display = 'inline-block';
        } else {
          badge.style.display = 'none';
        }
      },

      // === NUEVOS M√âTODOS PARA RENDERIZADO DE TICKETS ===
      renderTicketsList(tickets) {
        const ticketsList = document.getElementById('tickets-list');
        if (!ticketsList) return;

        if (tickets.length === 0) {
          ticketsList.innerHTML = `
            <div class="empty-state">
              <i class="fas fa-ticket-alt"></i>
              <p>No tienes tickets creados</p>
              <small>Crea tu primer ticket usando la pesta√±a "Crear Ticket"</small>
            </div>
          `;
          return;
        }

        const ticketsHtml = tickets.map(ticket => {
          const typeClass = ticket.tipo === 'SOLICITUD_FUNCION' ? 'solicitud' : 'problema';
          const typeLabel = ticket.tipo === 'SOLICITUD_FUNCION' ? 'Solicitud' : 'Problema';
          const statusLabel = {
            'PENDIENTE': 'Pendiente',
            'EN_PROCESO': 'En Proceso',
            'RESUELTO': 'Resuelto'
          }[ticket.estado] || 'Pendiente';
          
          const fechaCreacion = new Date(ticket.fechaCreacion).toLocaleDateString('es-ES');
          
          return `
            <div class="ticket-item">
              <div class="ticket-header">
                <div style="display: flex; align-items: center;">
                  <span class="ticket-type ${typeClass}">${typeLabel}</span>
                  <div class="ticket-priority priority-${ticket.prioridad}">${ticket.prioridad}</div>
                </div>
                <span class="ticket-status ${ticket.estado.toLowerCase().replace('_', '-')}">${statusLabel}</span>
              </div>
              <div class="ticket-description">${ticket.descripcion}</div>
              <div class="ticket-meta">
                <span>Creado: ${fechaCreacion}</span>
                <span>#${ticket.id}</span>
              </div>
            </div>
          `;
        }).join('');

        ticketsList.innerHTML = ticketsHtml;
      }
    };

    // === SISTEMA DE TICKETS ===
    const TicketSystem = {
      selectedPriority: null,
      userTickets: [],

      init() {
        // Referencias DOM del sistema de tickets
        this.openTicketsBtn = document.getElementById('open-tickets-btn');
        this.closeTicketsBtn = document.getElementById('close-tickets-btn');
        this.ticketsPanel = document.getElementById('tickets-panel');
        this.ticketsOverlay = document.getElementById('tickets-overlay');
        this.ticketUserInput = document.getElementById('ticket-user');
        this.ticketForm = document.getElementById('ticket-form');

        this.setupEventListeners();
        this.updateUserInfo();
        this.loadUserTickets();
      },

      updateUserInfo() {
        if (AppState.user && this.ticketUserInput) {
          const userName = AppState.user.nombre || 'Usuario Demo';
          const userRole = 'RAM ' + (AppState.ramNumber || '--');
          this.ticketUserInput.value = `${userName} (${userRole})`;
        }
      },

      setupEventListeners() {
        // Event listeners para abrir/cerrar
        this.openTicketsBtn?.addEventListener('click', () => this.openPanel());
        this.closeTicketsBtn?.addEventListener('click', () => this.closePanel());
        this.ticketsOverlay?.addEventListener('click', () => this.closePanel());

        // Manejo de tabs
        document.querySelectorAll('.tickets-tab').forEach(tab => {
          tab.addEventListener('click', (e) => this.switchTab(e.target.dataset.tab));
        });

        // Manejo del selector de prioridad
        document.querySelectorAll('.priority-option').forEach(option => {
          option.addEventListener('click', (e) => this.selectPriority(e.target.closest('.priority-option')));
        });

        // Manejo del env√≠o del formulario
        this.ticketForm?.addEventListener('submit', (e) => this.submitTicket(e));

        // Cerrar panel con tecla Escape
        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape' && this.ticketsPanel?.classList.contains('active')) {
            this.closePanel();
          }
        });
      },

      openPanel() {
        this.ticketsPanel?.classList.add('active');
        this.ticketsOverlay?.classList.add('active');
        document.body.style.overflow = 'hidden';
        this.loadUserTickets();
      },

      closePanel() {
        this.ticketsPanel?.classList.remove('active');
        this.ticketsOverlay?.classList.remove('active');
        document.body.style.overflow = '';
        this.resetForm();
      },

      switchTab(targetTab) {
        // Cambiar tab activo
        document.querySelectorAll('.tickets-tab').forEach(t => t.classList.remove('active'));
        document.querySelector(`[data-tab="${targetTab}"]`)?.classList.add('active');
        
        // Mostrar contenido correspondiente
        if (targetTab === 'create') {
          document.getElementById('create-ticket-tab').style.display = 'block';
          document.getElementById('view-tickets-tab').style.display = 'none';
        } else {
          document.getElementById('create-ticket-tab').style.display = 'none';
          document.getElementById('view-tickets-tab').style.display = 'block';
          this.loadUserTickets();
        }
      },

      selectPriority(option) {
        // Quitar selecci√≥n anterior
        document.querySelectorAll('.priority-option').forEach(o => o.classList.remove('selected'));
        
        // Seleccionar nueva prioridad
        option.classList.add('selected');
        this.selectedPriority = parseInt(option.dataset.priority);
      },

      resetForm() {
        this.ticketForm?.reset();
        this.selectedPriority = null;
        document.querySelectorAll('.priority-option').forEach(o => o.classList.remove('selected'));
        this.updateUserInfo();
      },

      async submitTicket(e) {
        e.preventDefault();

        if (!this.selectedPriority) {
          Swal.fire({
            icon: 'warning',
            title: 'Selecciona una prioridad',
            text: 'Debes seleccionar el nivel de prioridad del ticket',
            confirmButtonText: 'Entendido'
          });
          return;
        }

        const formData = new FormData(this.ticketForm);
        const ticketData = {
          tipo: formData.get('tipo'),
          descripcion: formData.get('descripcion'),
          prioridad: this.selectedPriority,
          usuarioSolicitante: formData.get('usuario')
        };

        // Mostrar loading
        const submitBtn = this.ticketForm.querySelector('.submit-ticket-btn');
        const originalText = submitBtn.innerHTML;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Enviando...';
        submitBtn.disabled = true;

        try {
          const result = await API.createTicket(ticketData);
          
          if (result.success) {
            await Swal.fire({
              icon: 'success',
              title: '¬°Ticket Creado!',
              html: `Tu ticket ha sido creado exitosamente.<br><br>
                     <strong>ID:</strong> #${result.data.id}<br>
                     <strong>Tipo:</strong> ${ticketData.tipo === 'SOLICITUD_FUNCION' ? 'Solicitud de Funci√≥n' : 'Reportar Problema'}<br>
                     <strong>Prioridad:</strong> ${this.selectedPriority}`,
              confirmButtonText: 'Ver mis tickets'
            });
            
            // Cambiar a la pesta√±a de ver tickets
            this.switchTab('view');
            this.resetForm();
          }
        } catch (error) {
          await Swal.fire({
            icon: 'error',
            title: 'Error al crear ticket',
            text: 'Hubo un problema al crear el ticket. Int√©ntalo nuevamente.',
            confirmButtonText: 'Entendido'
          });
        } finally {
          // Restaurar bot√≥n
          submitBtn.innerHTML = originalText;
          submitBtn.disabled = false;
        }
      },

      async loadUserTickets() {
        try {
          this.userTickets = await API.loadUserTickets();
          Renderer.renderTicketsList(this.userTickets);
        } catch (error) {
          console.error('Error loading user tickets:', error);
          Renderer.renderTicketsList([]);
        }
      }
    };

    // Inicializaci√≥n
    document.addEventListener('DOMContentLoaded', async function() {
      try {
        movimientoModal = new bootstrap.Modal(document.getElementById('movimientoModal'));
        envioModal = new bootstrap.Modal(document.getElementById('envioModal'));
        
        await cargarDatosIniciales();
        configurarEventListeners();
        
        // === INICIALIZAR SISTEMA DE TICKETS ===
        TicketSystem.init();
        
      } catch (error) {
        console.error('Error en inicializaci√≥n:', error);
        mostrarError('Error al cargar la aplicaci√≥n');
      }
    });

    async function cargarDatosIniciales() {
      mostrarCarga(true);
      
      try {
        const datos = await API.cargarDatos();
        
        AppState.inventario = datos.inventario || {};
        AppState.transferenciasRecibo = datos.transferenciasRecibo || [];
        AppState.transferenciasEnviadas = datos.transferenciasEnviadas || [];
        AppState.user = datos.user;
        AppState.ramNumber = datos.ramNumber;

        // Actualizar UI
        Utils.updateElementText('ram-number', AppState.ramNumber || '--');
        Utils.updateElementText('username', Utils.safeGetProperty(AppState.user, 'nombre', 'Usuario'));

        Renderer.renderInventario();
        Renderer.renderTransferenciasRecibo();
        Renderer.renderTransferenciasEnviadas();
        Renderer.updateBadge();

        // Actualizar info de usuario en tickets
        TicketSystem.updateUserInfo();

        ocultarError();
      } catch (error) {
        console.error('Error cargando datos:', error);
        mostrarError('Error al cargar los datos del inventario');
      } finally {
        mostrarCarga(false);
      }
    }

    function configurarEventListeners() {
      // Modal de movimiento (entrada/salida)
      document.addEventListener('click', function(e) {
        const button = e.target.closest('button[data-bs-target="#movimientoModal"]');
        if (button) {
          const skuId = button.getAttribute('data-sku-id');
          const skuNombre = button.getAttribute('data-sku-nombre');
          const tipoMovimiento = button.getAttribute('data-tipo-movimiento');
          
          document.getElementById('movimientoSkuId').value = skuId;
          document.getElementById('tipoMovimiento').value = tipoMovimiento;
          document.getElementById('movimientoNombreSkuModal').textContent = skuNombre;
          
          // Cambiar t√≠tulo y color del modal
          const modalTitle = document.getElementById('movimientoModalTitle');
          const modalHeader = document.getElementById('movimientoModalHeader');
          const infoDiv = document.getElementById('movimientoInfo');
          
          if (tipoMovimiento === 'ENTRADA') {
            modalTitle.textContent = 'Registrar Env√≠o de Insumos';
            modalHeader.className = 'modal-header bg-success text-white';
            infoDiv.style.display = 'none';
          } else {
            modalTitle.textContent = 'Registrar Recibo de Insumos';
            modalHeader.className = 'modal-header bg-danger text-white';
            infoDiv.style.display = 'block';
          }
          
          // Reset form
          const form = document.getElementById('movimientoForm');
          form.reset();
          form.classList.remove('was-validated');
          
          // Actualizar cantidad disponible cuando se seleccione el tipo (solo para salidas)
          const tipoSelect = document.getElementById('movimientoTipoInsumo');
          tipoSelect.addEventListener('change', function() {
            if (tipoMovimiento === 'SALIDA') {
              actualizarCantidadDisponible(skuId, this.value, 'movimiento');
            }
          });
        }
      });

      // Modal de env√≠o (transferencias)
      document.addEventListener('click', function(e) {
        const button = e.target.closest('button[data-bs-target="#envioModal"]');
        if (button) {
          const skuId = button.getAttribute('data-sku-id');
          const skuNombre = button.getAttribute('data-sku-nombre');
          
          document.getElementById('envioSkuId').value = skuId;
          document.getElementById('envioNombreSkuModal').textContent = skuNombre;
          
          // Reset form
          const form = document.getElementById('envioForm');
          form.reset();
          form.classList.remove('was-validated');
          
          // Actualizar cantidad disponible cuando se seleccione el tipo
          const tipoSelect = document.getElementById('envioTipoInsumo');
          tipoSelect.addEventListener('change', function() {
            actualizarCantidadDisponible(skuId, this.value, 'envio');
          });
        }
      });

      // Env√≠o del formulario de movimiento
      document.getElementById('movimientoForm').addEventListener('submit', procesarMovimiento);
      
      // Env√≠o del formulario de transferencia
      document.getElementById('envioForm').addEventListener('submit', procesarEnvio);

      // Validaci√≥n en tiempo real para movimientos
      const movimientoCantidadInput = document.getElementById('movimientoCantidad');
      movimientoCantidadInput.addEventListener('input', function() {
        const tipoMovimiento = document.getElementById('tipoMovimiento').value;
        if (tipoMovimiento === 'SALIDA') {
          const max = parseInt(document.getElementById('movimiento-cantidad-disponible').textContent);
          if (this.value > max) {
            this.setCustomValidity(`La cantidad no puede ser mayor a ${max}`);
          } else {
            this.setCustomValidity('');
          }
        }
      });

      // Validaci√≥n en tiempo real para env√≠os
      const envioCantidadInput = document.getElementById('envioCantidad');
      envioCantidadInput.addEventListener('input', function() {
        const max = parseInt(document.getElementById('envio-cantidad-disponible').textContent);
        if (this.value > max) {
          this.setCustomValidity(`La cantidad no puede ser mayor a ${max}`);
        } else {
          this.setCustomValidity('');
        }
      });
    }

    function actualizarCantidadDisponible(skuId, tipoInsumo, modalType) {
      const item = AppState.inventario[skuId];
      if (item && tipoInsumo) {
        const disponible = item[tipoInsumo] || 0;
        const elementId = modalType === 'movimiento' ? 'movimiento-cantidad-disponible' : 'envio-cantidad-disponible';
        Utils.updateElementText(elementId, disponible);
        
        const inputId = modalType === 'movimiento' ? 'movimientoCantidad' : 'envioCantidad';
        const cantidadInput = document.getElementById(inputId);
        cantidadInput.setAttribute('max', disponible);
      }
    }

    async function procesarMovimiento(e) {
      e.preventDefault();
      
      const form = e.target;
      if (!Utils.validateForm(form)) {
        return;
      }

      const btnMovimiento = document.getElementById('btn-movimiento');
      const spinner = btnMovimiento.querySelector('.spinner-border');
      
      // Estado de carga
      btnMovimiento.disabled = true;
      spinner.classList.remove('d-none');

      try {
        const formData = {
          skuId: document.getElementById('movimientoSkuId').value,
          tipoInsumo: document.getElementById('movimientoTipoInsumo').value,
          tipoMovimiento: document.getElementById('tipoMovimiento').value,
          cantidad: parseInt(document.getElementById('movimientoCantidad').value)
        };

        const result = await API.registrarMovimiento(formData);
        
        if (result.success) {
          await Swal.fire({
            icon: 'success',
            title: '¬°Movimiento Registrado!',
            text: result.message,
            timer: 2000,
            showConfirmButton: false
          });
          
          // Actualizar estado local
          actualizarInventarioLocal(formData, result.data);
          movimientoModal.hide();
          
        } else {
          throw new Error(result.message || 'Error al procesar movimiento');
        }
        
      } catch (error) {
        console.error('Error en movimiento:', error);
        await Swal.fire({
          icon: 'error',
          title: 'Error',
          text: error.message || 'Ocurri√≥ un error al registrar el movimiento.'
        });
      } finally {
        btnMovimiento.disabled = false;
        spinner.classList.add('d-none');
      }
    }

    async function procesarEnvio(e) {
      e.preventDefault();
      
      const form = e.target;
      if (!Utils.validateForm(form)) {
        return;
      }

      const btnEnviar = document.getElementById('btn-enviar');
      const spinner = btnEnviar.querySelector('.spinner-border');
      
      // Estado de carga
      btnEnviar.disabled = true;
      spinner.classList.remove('d-none');

      try {
        const formData = {
          skuId: document.getElementById('envioSkuId').value,
          tipoInsumo: document.getElementById('envioTipoInsumo').value,
          cantidad: parseInt(document.getElementById('envioCantidad').value)
        };

        const result = await API.enviarInsumos(formData);
        
        if (result.success) {
          await Swal.fire({
            icon: 'success',
            title: '¬°Env√≠o Registrado!',
            text: result.message,
            timer: 2000,
            showConfirmButton: false
          });
          
          // Actualizar estado local
          actualizarInventarioLocal(formData, result.data);
          envioModal.hide();
          
          // Recargar transferencias
          setTimeout(async () => {
            await cargarDatosIniciales();
          }, 1000);
          
        } else {
          throw new Error(result.message || 'Error al procesar env√≠o');
        }
        
      } catch (error) {
        console.error('Error en env√≠o:', error);
        await Swal.fire({
          icon: 'error',
          title: 'Error',
          text: error.message || 'Ocurri√≥ un error al registrar el env√≠o.'
        });
      } finally {
        btnEnviar.disabled = false;
        spinner.classList.add('d-none');
      }
    }

    function actualizarInventarioLocal(formData, newData) {
      const { skuId, tipoInsumo } = formData;
      
      if (AppState.inventario[skuId]) {
        AppState.inventario[skuId][tipoInsumo] = newData.cantidad;
        
        // Actualizar UI
        Utils.updateElementText(`cantidad-${skuId}-${tipoInsumo}`, newData.cantidad, true);
        
        // Recalcular total
        const item = AppState.inventario[skuId];
        const total = (item.CAPUCHONES || 0) + (item.BASES || 0) + (item.TAPAS || 0);
        Utils.updateElementText(`total-${skuId}`, total, true);

        // Actualizar estado de botones de salida
        actualizarEstadoBotonesSalida(skuId, total);
      }
    }

    function actualizarEstadoBotonesSalida(skuId, total) {
      const salidaBtn = document.querySelector(`button[data-sku-id="${skuId}"][data-tipo-movimiento="SALIDA"]`);
      if (salidaBtn) {
        if (total === 0) {
          salidaBtn.setAttribute('disabled', 'disabled');
        } else {
          salidaBtn.removeAttribute('disabled');
        }
      }
    }

    async function confirmarRecibo(transferenciaId) {
      const result = await Swal.fire({
        title: '¬øConfirmar recibo?',
        text: 'Esta acci√≥n agregar√° los insumos a su inventario.',
        icon: 'question',
        showCancelButton: true,
        confirmButtonColor: '#28a745',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'S√≠, confirmar',
        cancelButtonText: 'Cancelar'
      });

      if (!result.isConfirmed) return;

      try {
        const responseData = await API.confirmarRecibo(transferenciaId);
        
        if (responseData.success) {
          await Swal.fire({
            icon: 'success',
            title: '¬°Recibo Confirmado!',
            text: responseData.message,
            timer: 1500,
            showConfirmButton: false
          });
          
          // Actualizar datos
          await cargarDatosIniciales();
          
        } else {
          throw new Error(responseData.message || 'Error al confirmar recibo');
        }
        
      } catch (error) {
        console.error('Error confirmando recibo:', error);
        await Swal.fire({
          icon: 'error',
          title: 'Error',
          text: error.message || 'Error al confirmar el recibo.'
        });
      }
    }

    function mostrarTransferenciasPendientes(skuId) {
      const transferenciasTab = new bootstrap.Tab(document.getElementById('transferencias-tab'));
      transferenciasTab.show();
    }

    function mostrarCarga(show) {
      const loadingState = document.getElementById('loading-state');
      if (loadingState) {
        loadingState.style.display = show ? 'block' : 'none';
      }
    }

    function mostrarError(mensaje) {
      const errorState = document.getElementById('error-state');
      const errorMessage = document.getElementById('error-message');
      
      if (errorState && errorMessage) {
        errorMessage.textContent = mensaje;
        errorState.style.display = 'block';
      }
    }

    function ocultarError() {
      const errorState = document.getElementById('error-state');
      if (errorState) {
        errorState.style.display = 'none';
      }
    }

    async function recargarDatos() {
      await cargarDatosIniciales();
    }

    // Funci√≥n global para cerrar sesi√≥n (debe ser implementada)
    function cerrarSesion() {
      console.warn('Funci√≥n cerrarSesion() no implementada');
      // Implementar l√≥gica de cierre de sesi√≥n
    }

    // Manejo de errores globales
    window.addEventListener('error', function(event) {
      console.error('Error global:', event.error);
      mostrarError('Ha ocurrido un error inesperado');
    });

    window.addEventListener('unhandledrejection', function(event) {
      console.error('Promise rechazada:', event.reason);
      mostrarError('Error de conexi√≥n o procesamiento');
    });
  </script>
</body>
</html>