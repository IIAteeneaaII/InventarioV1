<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Iniciar Sesión RAM</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="/css/styles.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    /* Estilo para el contenedor del input con el botón */
    .password-container {
      position: relative;
    }
    
    .password-toggle {
  position: absolute;
  right: 10px;
  top: 5%;
  background: none;
  border: none;
  color: #6c757d;
  cursor: pointer;
  padding: 4px;
  font-size: 16px;
  z-index: 10;
  width: 32px;       
  height: 32px;      
  display: flex;
  align-items: center;
  justify-content: center;
}
    
    .password-toggle:hover {
      color: #495057;
      background: none !important;
      border: none !important;
    }
    
    .password-toggle:focus {
      outline: none;
      background: none !important;
      border: none !important;
      box-shadow: none !important;
    }
    
    /* Asegurar que el input tenga espacio para el botón */
    .password-input {
      padding-right: 40px !important;
    }

    /* Estilos mejorados para el mensaje de error */
    #error-message {
      font-size: 14px;
      margin-top: 8px;
      display: none;
    }

    #error-message.show {
      display: block;
      animation: fadeIn 0.3s ease-in;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-10px); }
      to { opacity: 1; transform: translateY(0); }
    }

    /* Estilo para el spinner en el botón */
    .btn-loading .spinner-border {
      width: 1rem;
      height: 1rem;
    }
  </style>
</head>

<body>
    <div class="login-container">
        <img src="/img/logo_ram.png" alt="Logo de la empresa" class="logo">
        <h2>Iniciar Sesión</h2>

        <form id="formLogin" novalidate>
          <div class="mb-3">
            <label for="correo" class="form-label">Correo electrónico:</label>
            <input type="text" class="form-control" id="correo" name="email" placeholder="correo@gmail.com" />
          </div>

          <div class="mb-3">
            <label for="contrasena">Contraseña:</label>
            <div class="password-container">
              <input type="password" class=" password-input" id="contrasena" name="password" placeholder="Ingresa tu contraseña" />
              <button type="button" class="password-toggle" id="togglePassword" title="Mostrar/Ocultar contraseña">
                <i class="fas fa-eye-slash" id="toggleIcon"></i>
              </button>
            </div>
          </div>
          
          <div id="error-message" class="alert alert-danger" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>
            <span id="error-text"></span>
          </div>
          
          <button type="submit" class="btn btn-success w-100" id="loginBtn">
            <span class="btn-text">Iniciar Sesión</span>
            <span class="spinner-border spinner-border-sm d-none me-2" role="status" aria-hidden="true"></span>
          </button>
        </form>

        <div class="text-end mt-3">
          <a class="link" href="/olvidarcontrasena">Olvidé mi contraseña</a>
        </div>
        <div class="text-end mt-2">
          <span>¿No tienes cuenta? <a class="link" href="/registro_prueba">Regístrate</a></span>
        </div>
    </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://unpkg.com/just-validate@latest/dist/just-validate.production.min.js"></script>
  <script src="/js/index.js"></script>
  
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("formLogin");
    const emailInput = document.getElementById("correo");
    const passwordInput = document.getElementById("contrasena");
    const errorMessage = document.getElementById("error-message");
    const errorText = document.getElementById("error-text");
    const loginBtn = document.getElementById("loginBtn");
    const btnText = loginBtn.querySelector('.btn-text');
    const spinner = loginBtn.querySelector('.spinner-border');
    
    // Función para mostrar errores
    function showError(message) {
      errorText.textContent = message;
      errorMessage.classList.add('show');
    }
    
    // Función para ocultar errores
    function hideError() {
      errorMessage.classList.remove('show');
    }
    
    // Función para manejar el estado del botón
    function setLoadingState(loading) {
      if (loading) {
        loginBtn.disabled = true;
        btnText.textContent = 'Procesando...';
        spinner.classList.remove('d-none');
        loginBtn.classList.add('btn-loading');
      } else {
        loginBtn.disabled = false;
        btnText.textContent = 'Iniciar Sesión';
        spinner.classList.add('d-none');
        loginBtn.classList.remove('btn-loading');
      }
    }
    
    // Funcionalidad del botón de mostrar/ocultar contraseña
    const togglePassword = document.getElementById("togglePassword");
    const toggleIcon = document.getElementById("toggleIcon");
    
    togglePassword.addEventListener("click", function() {
      const type = passwordInput.getAttribute("type") === "password" ? "text" : "password";
      passwordInput.setAttribute("type", type);
      
      if (type === "text") {
        toggleIcon.classList.remove("fa-eye-slash");
        toggleIcon.classList.add("fa-eye");
        togglePassword.setAttribute("title", "Ocultar contraseña");
      } else {
        toggleIcon.classList.remove("fa-eye");
        toggleIcon.classList.add("fa-eye-slash");
        togglePassword.setAttribute("title", "Mostrar contraseña");
      }
    });

    // Cargar el correo guardado
    const savedEmail = localStorage.getItem("savedEmail");
    if (savedEmail) {
      emailInput.value = savedEmail;
    }

    // Ocultar error cuando el usuario empiece a escribir
    emailInput.addEventListener('input', hideError);
    passwordInput.addEventListener('input', hideError);

    // Validación básica del formulario
    function validateForm() {
      const email = emailInput.value.trim();
      const password = passwordInput.value.trim();
      
      if (!email) {
        showError('Por favor, ingresa tu correo electrónico');
        emailInput.focus();
        return false;
      }
      
      if (!password) {
        showError('Por favor, ingresa tu contraseña');
        passwordInput.focus();
        return false;
      }
      
      return true;
    }

    // Manejo del envío del formulario
    form.addEventListener("submit", function(e) {
      e.preventDefault();
      
      // Ocultar errores previos
      hideError();
      
      // Validar formulario
      if (!validateForm()) {
        return;
      }
      
      // Guardar email
      localStorage.setItem("savedEmail", emailInput.value.trim());
      
      // Activar estado de carga
      setLoadingState(true);
      
      // Enviar solicitud
      fetch('/api/auth/login', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          email: emailInput.value.trim(),
          password: passwordInput.value.trim()
        })
      })
      .then(response => {
        console.log('Status:', response.status);
        
        // Verificar si la respuesta es JSON
        const contentType = response.headers.get("content-type");
        if (!contentType || !contentType.includes("application/json")) {
          throw new Error("La respuesta del servidor no es JSON válida");
        }
        
        return response.json();
      })
      .then(data => {
        console.log('Respuesta login:', data);
        
        if (data.success && data.redirectTo) {
          // Login exitoso
          if (data.user) {
            console.log('Usuario guardado:', data.user);
            localStorage.setItem('usuarioActual', JSON.stringify(data.user));
          }
          
          console.log('Redirigiendo a:', data.redirectTo);
          window.location.href = data.redirectTo;
          
        } else {
          // Error en las credenciales o validación
          const errorMsg = data.error || data.message || 'Usuario o contraseña incorrectos';
          showError(errorMsg);
          setLoadingState(false);
        }
      })
      .catch(error => {
        console.error('Error login:', error);
        
        // Determinar el mensaje de error apropiado
        let errorMsg = 'Usuario o contraseña incorrectos';
        
        if (error.message.includes('JSON') || error.message.includes('fetch')) {
          errorMsg = 'Error de conexión con el servidor. Intenta nuevamente.';
        }
        
        showError(errorMsg);
        setLoadingState(false);
      });
    });

    // Efecto visual al enfocar los inputs
    emailInput.addEventListener('focus', function() {
      this.parentElement.classList.add('focused');
    });
    
    emailInput.addEventListener('blur', function() {
      this.parentElement.classList.remove('focused');
    });
    
    passwordInput.addEventListener('focus', function() {
      this.parentElement.parentElement.classList.add('focused');
    });
    
    passwordInput.addEventListener('blur', function() {
      this.parentElement.parentElement.classList.remove('focused');
    });
  });
</script>
</body>
</html>